generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  ownedGroups   Group[]        @relation("GroupOwner")
  memberships   GroupMember[]
  sentInvites   Invite[]       @relation("InviteSender")
  createdEvents Event[]        @relation("EventCreator")
  responses     AvailabilityResponse[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String   @map("owner_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  owner   User          @relation("GroupOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members GroupMember[]
  invites Invite[]
  events  Event[]

  @@map("groups")
}

model GroupMember {
  id        String          @id @default(cuid())
  groupId   String          @map("group_id")
  userId    String          @map("user_id")
  role      GroupMemberRole @default(MEMBER)
  joinedAt  DateTime        @default(now()) @map("joined_at")

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_members")
}

model Invite {
  id        String       @id @default(cuid())
  email     String
  token     String       @unique
  groupId   String       @map("group_id")
  senderId  String       @map("sender_id")
  status    InviteStatus @default(PENDING)
  expiresAt DateTime     @map("expires_at")
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  group  Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  sender User  @relation("InviteSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("invites")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  groupId     String   @map("group_id")
  creatorId   String   @map("creator_id")
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  group     Group                    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creator   User                     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  responses AvailabilityResponse[]

  @@map("events")
}

model AvailabilityResponse {
  id        String               @id @default(cuid())
  eventId   String               @map("event_id")
  userId    String               @map("user_id")
  status    AvailabilityStatus
  comment   String?
  createdAt DateTime             @default(now()) @map("created_at")
  updatedAt DateTime             @updatedAt @map("updated_at")

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("availability_responses")
}

enum GroupMemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
  MAYBE
}
